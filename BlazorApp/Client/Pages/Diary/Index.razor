@page "/diary"
@using BlazorApp.Server.Models
@inject HttpClient client
@inject IJSRuntime js


<h3>Diary</h3>
<small>Add thing to Diary list.</small>
<div class="form-group">
    <a class="btn btn-success" href="Diary/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>
@if (diaries == null)
{
    <text>Loading diaries... </text>
}
else if (diaries.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Date</th>
                <th>Title</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in diaries)
            {
                <tr>
                    <td>@item.DiaryID</td>
                    <td>@item.Date</td>
                    <td>@item.Title</td>
                    <td>@item.Description</td>
                    <td>
                        <a class="btn btn-success" href="Diary/edit/@item.DiaryID">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(item.DiaryID))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    Diary[] diaries { get; set; }
    protected override async Task OnInitializedAsync()
    {
        diaries = await client.GetFromJsonAsync<Diary[]>("api/v1.0/Diary");
    }

    async Task Delete(int diaryId)
    {
        var diary = diaries.First(x => x.DiaryID == diaryId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {diary.Title}'s ({diary.DiaryID}) Record?"))
        {
            await client.DeleteAsync($"api/v1.0/Todo/{diaryId}");
            await OnInitializedAsync();
        }
    }
}